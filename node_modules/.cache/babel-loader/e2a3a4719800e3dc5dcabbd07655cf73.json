{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\malik.ertugrul\\\\Desktop\\\\Work\\\\Reactjs\\\\reactapp\\\\src\\\\context.js\";\nimport React, { Component, createContext } from 'react'; //Öncelikle createContext metodunu kullanarak bir context oluştururuz. Bu bize bir Context nesnesi döndürür.\n// Context nesnesi içerisinde Provider ve Consumer adında 2 component bulunmaktadır.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst userContext = /*#__PURE__*/createContext();\nconst userConsumer = userContext.Consumer; // Daha sonrasında global olarak tutmak istediğimiz state’lerin bulunacağı component’i oluşturmamız\n// gerekmektedir. Bu componentimizi userProvider olarak adlandıralım.\n\nexport class userProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      users: [{\n        id: 1,\n        name: \"Malik Ertuğrul\",\n        department: \"IT\",\n        sallery: \"7000\"\n      }, {\n        id: 2,\n        name: \"Ali Veli\",\n        department: \"Salery\",\n        sallery: \"5000\"\n      }, {\n        id: 3,\n        name: \"Mehmet Hasan\",\n        department: \"Banking\",\n        sallery: \"9000\"\n      }]\n    };\n  }\n\n  // userContext.Provider içerisinde value adında bir props bulunmaktadır.\n  // Buraya diğer componentler tarafından erişilmesini istediğimiz değerleri yazalım.\n  // this.props.children, userContext component’inin tag’ları içerisinde yer alan tüm component’lerin,\n  // value kısmına yazılmış olan değerlere erişebileceğini gösterir.\n  render() {\n    return /*#__PURE__*/_jsxDEV(userContext.Provider, {\n      value: this.state,\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default userConsumer; // Provider component’imizin diğer componentler tarafında erişilebilir olmasını sağlayabilmek için component \n// ağacımızın en üstüne yerleştirmemiz gerekir.\n// App componenti, uygulamamızın en üstünde bulunan component olduğu için,\n// Provider component’ini de index.js içerisinde çağırarak sağlayabiliriz.","map":{"version":3,"sources":["C:/Users/malik.ertugrul/Desktop/Work/Reactjs/reactapp/src/context.js"],"names":["React","Component","createContext","userContext","userConsumer","Consumer","userProvider","state","users","id","name","department","sallery","render","props","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD,C,CAEA;AACA;;;AACA,MAAMC,WAAW,gBAAGD,aAAa,EAAjC;AACA,MAAME,YAAY,GAAGD,WAAW,CAACE,QAAjC,C,CAEA;AACA;;AAEA,OAAO,MAAMC,YAAN,SAA2BL,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACxCM,KADwC,GAChC;AACJC,MAAAA,KAAK,EAAE,CACH;AACIC,QAAAA,EAAE,EAAE,CADR;AAEIC,QAAAA,IAAI,EAAE,gBAFV;AAGIC,QAAAA,UAAU,EAAE,IAHhB;AAIIC,QAAAA,OAAO,EAAE;AAJb,OADG,EAOH;AACIH,QAAAA,EAAE,EAAE,CADR;AAEIC,QAAAA,IAAI,EAAE,UAFV;AAGIC,QAAAA,UAAU,EAAE,QAHhB;AAIIC,QAAAA,OAAO,EAAE;AAJb,OAPG,EAaH;AACIH,QAAAA,EAAE,EAAE,CADR;AAEIC,QAAAA,IAAI,EAAE,cAFV;AAGIC,QAAAA,UAAU,EAAE,SAHhB;AAIIC,QAAAA,OAAO,EAAE;AAJb,OAbG;AADH,KADgC;AAAA;;AA0BxC;AACA;AACA;AACA;AAGAC,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE,KAAKN,KAAlC;AAAA,gBACK,KAAKO,KAAL,CAAWC;AADhB;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAtCuC;AAyC5C,eAAeX,YAAf,C,CAEA;AACA;AACA;AACA","sourcesContent":["import React, { Component, createContext } from 'react';\r\n\r\n//Öncelikle createContext metodunu kullanarak bir context oluştururuz. Bu bize bir Context nesnesi döndürür.\r\n// Context nesnesi içerisinde Provider ve Consumer adında 2 component bulunmaktadır.\r\nconst userContext = createContext();\r\nconst userConsumer = userContext.Consumer;\r\n\r\n// Daha sonrasında global olarak tutmak istediğimiz state’lerin bulunacağı component’i oluşturmamız\r\n// gerekmektedir. Bu componentimizi userProvider olarak adlandıralım.\r\n\r\nexport class userProvider extends Component {\r\n    state = {\r\n        users: [\r\n            {\r\n                id: 1,\r\n                name: \"Malik Ertuğrul\",\r\n                department: \"IT\",\r\n                sallery: \"7000\"\r\n            },\r\n            {\r\n                id: 2,\r\n                name: \"Ali Veli\",\r\n                department: \"Salery\",\r\n                sallery: \"5000\"\r\n            },\r\n            {\r\n                id: 3,\r\n                name: \"Mehmet Hasan\",\r\n                department: \"Banking\",\r\n                sallery: \"9000\"\r\n            }\r\n\r\n\r\n        ]\r\n    }\r\n\r\n    // userContext.Provider içerisinde value adında bir props bulunmaktadır.\r\n    // Buraya diğer componentler tarafından erişilmesini istediğimiz değerleri yazalım.\r\n    // this.props.children, userContext component’inin tag’ları içerisinde yer alan tüm component’lerin,\r\n    // value kısmına yazılmış olan değerlere erişebileceğini gösterir.\r\n\r\n\r\n    render() {\r\n        return (\r\n            <userContext.Provider value={this.state}>\r\n                {this.props.children}\r\n            </userContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default userConsumer;\r\n\r\n// Provider component’imizin diğer componentler tarafında erişilebilir olmasını sağlayabilmek için component \r\n// ağacımızın en üstüne yerleştirmemiz gerekir.\r\n// App componenti, uygulamamızın en üstünde bulunan component olduğu için,\r\n// Provider component’ini de index.js içerisinde çağırarak sağlayabiliriz."]},"metadata":{},"sourceType":"module"}