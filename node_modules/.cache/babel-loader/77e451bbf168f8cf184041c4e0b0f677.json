{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\malik.ertugrul\\\\Desktop\\\\Work\\\\Reactjs\\\\reactapp\\\\src\\\\Context.js\";\nimport React, { Component, createContext } from 'react'; //Öncelikle createContext metodunu kullanarak bir context oluştururuz. Bu bize bir Context nesnesi döndürür.\n// Context nesnesi içerisinde Provider ve Consumer adında 2 component bulunmaktadır.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nconst UserConsumer = UserContext.Consumer;\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"DELETE_USER\":\n      //neden return {} oldu normalde return()\n      return { ...state,\n        users: state.users.filter(user => action.payload !== user.id)\n      };\n\n    case \"ADD_USER\":\n      return { ...state,\n        users: [...state.users, action.payload]\n      };\n\n    default:\n      return state;\n  }\n}; // Daha sonrasında global olarak tutmak istediğimiz state’lerin bulunacağı component’i oluşturmamız\n// gerekmektedir. Bu componentimizi userProvider olarak adlandıralım.\n\n\nexport class UserProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      users: [],\n      dispatch: action => {\n        this.setState(state => reducer(state, action));\n      }\n    };\n  }\n\n  // userContext.Provider içerisinde value adında bir props bulunmaktadır.\n  // Buraya diğer componentler tarafından erişilmesini istediğimiz değerleri yazalım.\n  // this.props.children, userContext component’inin tag’ları içerisinde yer alan tüm component’lerin,\n  // value kısmına yazılmış olan değerlere erişebileceğini gösterir.\n  render() {\n    return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n      value: this.state,\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default UserConsumer; // Provider component’imizin diğer componentler tarafında erişilebilir olmasını sağlayabilmek için component \n// ağacımızın en üstüne yerleştirmemiz gerekir.\n// App componenti, uygulamamızın en üstünde bulunan component olduğu için,\n// Provider component’ini de index.js içerisinde çağırarak sağlayabiliriz.","map":{"version":3,"sources":["C:/Users/malik.ertugrul/Desktop/Work/Reactjs/reactapp/src/Context.js"],"names":["React","Component","createContext","UserContext","UserConsumer","Consumer","reducer","state","action","type","users","filter","user","payload","id","UserProvider","dispatch","setState","render","props","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD,C,CAEA;AACA;;;AACA,MAAMC,WAAW,gBAAGD,aAAa,EAAjC;AACA,MAAME,YAAY,GAAGD,WAAW,CAACE,QAAjC;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,aAAL;AACI;AACA,aAAO,EACH,GAAGF,KADA;AAEHG,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,CAAYC,MAAZ,CAAmBC,IAAI,IAAIJ,MAAM,CAACK,OAAP,KAAmBD,IAAI,CAACE,EAAnD;AAFJ,OAAP;;AAIJ,SAAK,UAAL;AACI,aAAM,EACF,GAAGP,KADD;AAEFG,QAAAA,KAAK,EAAE,CAAC,GAAGH,KAAK,CAACG,KAAV,EAAgBF,MAAM,CAACK,OAAvB;AAFL,OAAN;;AAKJ;AACI,aAAON,KAAP;AAdR;AAgBH,CAjBD,C,CAmBA;AACA;;;AAEA,OAAO,MAAMQ,YAAN,SAA2Bd,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACxCM,KADwC,GAChC;AACJG,MAAAA,KAAK,EAAE,EADH;AAEJM,MAAAA,QAAQ,EAAER,MAAM,IAAI;AAChB,aAAKS,QAAL,CAAcV,KAAK,IAAID,OAAO,CAACC,KAAD,EAAQC,MAAR,CAA9B;AACH;AAJG,KADgC;AAAA;;AAQxC;AACA;AACA;AACA;AAGAU,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE,KAAKX,KAAlC;AAAA,gBACK,KAAKY,KAAL,CAAWC;AADhB;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AApBuC;AAuB5C,eAAehB,YAAf,C,CAEA;AACA;AACA;AACA","sourcesContent":["import React, { Component, createContext } from 'react';\r\n\r\n//Öncelikle createContext metodunu kullanarak bir context oluştururuz. Bu bize bir Context nesnesi döndürür.\r\n// Context nesnesi içerisinde Provider ve Consumer adında 2 component bulunmaktadır.\r\nconst UserContext = createContext();\r\nconst UserConsumer = UserContext.Consumer;\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"DELETE_USER\":\r\n            //neden return {} oldu normalde return()\r\n            return {\r\n                ...state,\r\n                users: state.users.filter(user => action.payload !== user.id)\r\n            }\r\n        case \"ADD_USER\":\r\n            return{\r\n                ...state,\r\n                users: [...state.users,action.payload]\r\n            }\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Daha sonrasında global olarak tutmak istediğimiz state’lerin bulunacağı component’i oluşturmamız\r\n// gerekmektedir. Bu componentimizi userProvider olarak adlandıralım.\r\n\r\nexport class UserProvider extends Component {\r\n    state = {\r\n        users: [ ],\r\n        dispatch: action => {\r\n            this.setState(state => reducer(state, action))\r\n        }\r\n    }\r\n\r\n    // userContext.Provider içerisinde value adında bir props bulunmaktadır.\r\n    // Buraya diğer componentler tarafından erişilmesini istediğimiz değerleri yazalım.\r\n    // this.props.children, userContext component’inin tag’ları içerisinde yer alan tüm component’lerin,\r\n    // value kısmına yazılmış olan değerlere erişebileceğini gösterir.\r\n\r\n\r\n    render() {\r\n        return (\r\n            <UserContext.Provider value={this.state}>\r\n                {this.props.children}\r\n            </UserContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserConsumer;\r\n\r\n// Provider component’imizin diğer componentler tarafında erişilebilir olmasını sağlayabilmek için component \r\n// ağacımızın en üstüne yerleştirmemiz gerekir.\r\n// App componenti, uygulamamızın en üstünde bulunan component olduğu için,\r\n// Provider component’ini de index.js içerisinde çağırarak sağlayabiliriz."]},"metadata":{},"sourceType":"module"}